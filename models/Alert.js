const mongoose = require('mongoose');

const alertSchema = new mongoose.Schema({
  inventory: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Inventory',
    required: true
  },
  type: {
    type: String,
    enum: ['LOW_STOCK', 'OUT_OF_STOCK', 'OVERSTOCK', 'EXPIRY_WARNING', 'REORDER_POINT'],
    required: true
  },
  priority: {
    type: String,
    enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'],
    default: 'MEDIUM'
  },
  title: {
    type: String,
    required: true
  },
  message: {
    type: String,
    required: true
  },
  currentQuantity: {
    type: Number,
    required: true
  },
  thresholdQuantity: {
    type: Number,
    required: true
  },
  isResolved: {
    type: Boolean,
    default: false
  },
  resolvedAt: {
    type: Date
  },
  resolvedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  resolutionNotes: {
    type: String,
    default: ''
  },
  actionTaken: {
    type: String,
    enum: ['NONE', 'REORDER_INITIATED', 'STOCK_ADJUSTED', 'ITEM_REPLENISHED', 'OTHER'],
    default: 'NONE'
  },
  expiryDate: {
    type: Date // For expiry warnings
  },
  autoGenerated: {
    type: Boolean,
    default: true
  },
  notificationsSent: [{
    method: {
      type: String,
      enum: ['EMAIL', 'SMS', 'IN_APP']
    },
    recipient: String,
    sentAt: {
      type: Date,
      default: Date.now
    },
    status: {
      type: String,
      enum: ['SENT', 'DELIVERED', 'FAILED'],
      default: 'SENT'
    }
  }],
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }
}, {
  timestamps: true
});

// Virtual for alert age
alertSchema.virtual('age').get(function() {
  return Math.floor((Date.now() - this.createdAt) / (1000 * 60 * 60 * 24)); // in days
});

// Index for better performance
alertSchema.index({ inventory: 1 });
alertSchema.index({ type: 1 });
alertSchema.index({ priority: 1 });
alertSchema.index({ isResolved: 1 });
alertSchema.index({ createdAt: -1 });

// Static method to get active alerts
alertSchema.statics.getActiveAlerts = function() {
  return this.find({ isResolved: false })
    .populate('inventory', 'sku name qtyOnHand')
    .sort({ priority: -1, createdAt: -1 });
};

// Static method to create stock alert
alertSchema.statics.createStockAlert = async function(inventoryItem) {
  const alertTypes = [];
  
  if (inventoryItem.qtyOnHand === 0) {
    alertTypes.push({
      type: 'OUT_OF_STOCK',
      priority: 'CRITICAL',
      title: `Out of Stock: ${inventoryItem.name}`,
      message: `Item ${inventoryItem.sku} is completely out of stock`
    });
  } else if (inventoryItem.qtyOnHand <= inventoryItem.minThreshold) {
    alertTypes.push({
      type: 'LOW_STOCK',
      priority: 'HIGH',
      title: `Low Stock Alert: ${inventoryItem.name}`,
      message: `Item ${inventoryItem.sku} stock is below minimum threshold`
    });
  }

  if (inventoryItem.qtyOnHand >= inventoryItem.maxThreshold) {
    alertTypes.push({
      type: 'OVERSTOCK',
      priority: 'LOW',
      title: `Overstock Alert: ${inventoryItem.name}`,
      message: `Item ${inventoryItem.sku} stock exceeds maximum threshold`
    });
  }

  const alerts = [];
  for (const alertData of alertTypes) {
    // Check if similar alert already exists
    const existingAlert = await this.findOne({
      inventory: inventoryItem._id,
      type: alertData.type,
      isResolved: false
    });

    if (!existingAlert) {
      const alert = new this({
        inventory: inventoryItem._id,
        ...alertData,
        currentQuantity: inventoryItem.qtyOnHand,
        thresholdQuantity: alertData.type === 'OVERSTOCK' ? inventoryItem.maxThreshold : inventoryItem.minThreshold
      });
      alerts.push(await alert.save());
    }
  }
  
  return alerts;
};

module.exports = mongoose.model('Alert', alertSchema);
